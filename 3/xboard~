#! /usr/bin/env racket
#lang racket/base

(require json)

(require "../Maze/Common/serialize.rkt")
(require "../Maze/Common/board.rkt")


;; InputPort -> (values HashTable HashTable)
;; Reads a board object and coordinate object from STDIN
(define (read-board-and-coordinate input-port)
  (define board-ht (read-json input-port))
  (define coordinate (read-json input-port))
  (values board-ht coordinate))


;; GridPosn GridPosn -> Boolean
;; Compares two GridPosns in row-then-column order
(define (compare-row-col pos1 pos2)
  (define-values (row1 col1 row2 col2) (values (car pos1) (cdr pos1) (car pos2) (cdr pos2)))
  (cond
    [(= row1 row2) (<= col1 col2)]
    [(< row1 row2) #t]
    [(> row1 row2) #f]))

(module+ test
  (require rackunit)
  (check-true (compare-row-col (cons 0 0) (cons 0 0)))
  (check-true (compare-row-col (cons 0 0) (cons 0 1)))
  (check-false (compare-row-col (cons 0 1) (cons 0 0)))
  (check-false (compare-row-col (cons 1 0) (cons 0 1))))


;; Reads a board and position from STDIN, computes all positions reachable from
;; the given position, and writes these positions to STDOUT as JSON
(module+ main
  (define-values (board-ht coordinate) (read-board-and-coordinate (current-input-port)))
  (define board (hash->board board-ht))
  (define pos (cons (hash-ref coordinate 'row#) (hash-ref coordinate 'column#)))
  (write-json
   (map gridposn->hash (sort (board-all-reachable-from board pos) compare-row-col))))
