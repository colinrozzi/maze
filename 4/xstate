#! /usr/bin/env racket
#lang racket

(require json)

(require (submod "../Maze/Common/board.rkt" serialize))
(require (submod "../Maze/Common/state.rkt" serialize))
(require "../Maze/Common/state.rkt")
(require "../Maze/Common/board.rkt")


;; InputPort -> (values HashTable HashTable)
;; Reads a board object and coordinate object from STDIN
(define (read-json-input input-port)
  (define state-ht (read-json input-port))
  (define index-ht (read-json input-port))
  (define dir-ht (read-json input-port))
  (define degree-ht (read-json input-port))
  (values state-ht index-ht dir-ht degree-ht))


;; Reads a board and position from STDIN, computes all positions reachable from
;; the given position, and writes these positions to STDOUT as JSON
(module+ main
  (define-values (state-ht index-ip dir-ip degree-ip) (read-json-input (current-input-port)))
  (define state (json-public-state->player-state state-ht))
  (define index index-ip)
  (define dir (json-direction->shift-direction dir-ip))
  (define degree degree-ip) 
  (define state-after-shift (gamestate-shift-and-insert state (shift-new dir index) degree))

  (write-json (map gridposn->json-coordinate (sort (all-reachable-from-active state-after-shift) compare-row-col))))