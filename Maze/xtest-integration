#! /usr/bin/env racket
#lang racket/base

(require json)
(require rackunit)


;; Path (cons Path Path) -> Void
(define (run-test-case executable test-case)
  (writeln (string-append "Testing: " (car test-case)))
  (define test-case-input-port (open-input-file (car test-case)))
  (define expected-output (read-json (open-input-file (cdr test-case))))
  (define-values (proc child-out child-in e) (subprocess #f test-case-input-port #f #f executable))
  (define actual-output (read-json child-out))
  (check-equal? actual-output expected-output))


;; Test milestone 2
(writeln "Testing milestone 2: xboard")
(define milestone-2-test-cases (list (cons "../3/Tests/0-in.json" "../3/Tests/0-out.json")
                                     (cons "../3/Tests/1-in.json" "../3/Tests/1-out.json")
                                     (cons "../3/Tests/2-in.json" "../3/Tests/2-out.json")
                                     (cons "../3/ForStudents/0-in.json" "../3/ForStudents/0-out.json")
                                     (cons "../3/ForStudents/1-in.json" "../3/ForStudents/1-out.json")
                                     (cons "../3/ForStudents/2-in.json" "../3/ForStudents/2-out.json")))
(for ([testcase milestone-2-test-cases])
  (run-test-case "../3/xboard" testcase))

(writeln "Testing milestone 3: xstate")
;; Test milestone 3
(define milestone-3-test-cases (list (cons "../4/Tests/0-in.json" "../4/Tests/0-out.json")
                                     (cons "../4/Tests/1-in.json" "../4/Tests/1-out.json")
                                     (cons "../4/Tests/2-in.json" "../4/Tests/2-out.json")
                                     (cons "../4/Tests/3-in.json" "../4/Tests/3-out.json")
                                     (cons "../4/Tests/4-in.json" "../4/Tests/4-out.json")
                                     (cons "../4/ForStudents/0-in.json" "../4/ForStudents/0-out.json")
                                     (cons "../4/ForStudents/1-in.json" "../4/ForStudents/1-out.json")
                                     (cons "../4/ForStudents/2-in.json" "../4/ForStudents/2-out.json")))
(for ([testcase milestone-3-test-cases])
  (run-test-case "../4/xstate" testcase))

(writeln "Testing milestone 4: xchoice")
;; Test milestone 4
(define milestone-4-test-cases (list (cons "../5/Tests/0-in.json" "../5/Tests/0-out.json")
                                     (cons "../5/Tests/1-in.json" "../5/Tests/1-out.json")
                                     (cons "../5/Tests/2-in.json" "../5/Tests/2-out.json")
                                     (cons "../5/Tests/3-in.json" "../5/Tests/3-out.json")
                                     (cons "../5/Tests/4-in.json" "../5/Tests/4-out.json")
                                     (cons "../5/ForStudents/0-in.json" "../5/ForStudents/0-out.json")
                                     (cons "../5/ForStudents/1-in.json" "../5/ForStudents/1-out.json")
                                     (cons "../5/ForStudents/2-in.json" "../5/ForStudents/2-out.json")))
(for ([testcase milestone-4-test-cases])
  (run-test-case "../5/xchoice" testcase))

(writeln "Testing milestone 5: xgames")
;; Test milestone 5
(define milestone-5-test-cases (list (cons "../6/Tests/0-in.json" "../6/Tests/0-out.json")
                                     (cons "../6/Tests/1-in.json" "../6/Tests/1-out.json")
                                     (cons "../6/Tests/2-in.json" "../6/Tests/2-out.json")
                                     (cons "../6/ForStudents/0-in.json" "../6/ForStudents/0-out.json")
                                     (cons "../6/ForStudents/1-in.json" "../6/ForStudents/1-out.json")
                                     (cons "../6/ForStudents/2-in.json" "../6/ForStudents/2-out.json")))
(for ([testcase milestone-5-test-cases])
  (run-test-case "../6/xgames" testcase))

(writeln "Testing milestone 6: xbad")
;; Test milestone 6
(define milestone-6-test-cases (list (cons "../7/Tests/0-in.json" "../7/Tests/0-out.json")
                                     (cons "../7/Tests/1-in.json" "../7/Tests/1-out.json")
                                     (cons "../7/Tests/2-in.json" "../7/Tests/2-out.json")
                                     (cons "../7/ForStudents/0-in.json" "../7/ForStudents/0-out.json")
                                     (cons "../7/ForStudents/1-in.json" "../7/ForStudents/1-out.json")
                                     (cons "../7/ForStudents/2-in.json" "../7/ForStudents/2-out.json")))
(for ([testcase milestone-6-test-cases])
  (run-test-case "../7/xbad" testcase))

(writeln "Testing milestone 7: xbad2")
;; Test milestone 7
(define milestone-7-test-cases (list (cons "../8/Tests/0-in.json" "../8/Tests/0-out.json")
                                     (cons "../8/Tests/1-in.json" "../8/Tests/1-out.json")
                                     (cons "../8/Tests/2-in.json" "../8/Tests/2-out.json")
                                     (cons "../8/Tests/3-in.json" "../8/Tests/3-out.json")
                                     (cons "../8/Tests/4-in.json" "../8/Tests/4-out.json")
                                     (cons "../8/ForStudents/0-in.json" "../8/ForStudents/0-out.json")
                                     (cons "../8/ForStudents/1-in.json" "../8/ForStudents/1-out.json")
                                     (cons "../8/ForStudents/2-in.json" "../8/ForStudents/2-out.json")
                                     (cons "../8/testfest/staff-tests/0-in.json" "../8/testfest/staff-tests/0-out.json")
                                     (cons "../8/testfest/staff-tests/1-in.json" "../8/testfest/staff-tests/1-out.json")
                                     (cons "../8/testfest/staff-tests/2-in.json" "../8/testfest/staff-tests/2-out.json")
                                     (cons "../8/testfest/staff-tests/3-in.json" "../8/testfest/staff-tests/3-out.json")
                                     (cons "../8/testfest/staff-tests/4-in.json" "../8/testfest/staff-tests/4-out.json")))
(for ([testcase milestone-7-test-cases])
  (run-test-case "../8/xbad2" testcase))

(writeln "Testing milestone 8: xbad3")
;; Test milestone 7
(define milestone-8-test-cases (list (cons "../9/ForStudents/0-in.json" "../9/ForStudents/0-out.json")
                                     (cons "../9/ForStudents/1-in.json" "../9/ForStudents/1-out.json")
                                     (cons "../9/ForStudents/2-in.json" "../9/ForStudents/2-out.json")
                                     (cons "../9/testfest/staff-tests/0-in.json" "../9/testfest/staff-tests/0-out.json")
                                     (cons "../9/testfest/staff-tests/1-in.json" "../9/testfest/staff-tests/1-out.json")
                                     (cons "../9/testfest/staff-tests/2-in.json" "../9/testfest/staff-tests/2-out.json")
                                     (cons "../9/testfest/staff-tests/3-in.json" "../9/testfest/staff-tests/3-out.json")
                                     (cons "../9/testfest/staff-tests/4-in.json" "../9/testfest/staff-tests/4-out.json")))
(for ([testcase milestone-8-test-cases])
  (run-test-case "../10/xbad3" testcase))

(writeln "Testing milestone 9: xbad3")
;; Test milestone 7
(define milestone-9-test-cases (list (cons "../10/Tests/0-in.json" "../10/Tests/0-out.json")
                                     (cons "../10/Tests/1-in.json" "../10/Tests/1-out.json")
                                     (cons "../10/Tests/2-in.json" "../10/Tests/2-out.json")
                                     (cons "../10/Tests/3-in.json" "../10/Tests/3-out.json")
                                     (cons "../10/Tests/4-in.json" "../10/Tests/4-out.json")
                                     (cons "../10/ForStudents/0-in.json" "../10/ForStudents/0-out.json")
                                     (cons "../10/ForStudents/1-in.json" "../10/ForStudents/1-out.json")
                                     (cons "../10/ForStudents/2-in.json" "../10/ForStudents/2-out.json")))
(for ([testcase milestone-9-test-cases])
  (run-test-case "../10/xbad3" testcase))

(writeln "Done")
